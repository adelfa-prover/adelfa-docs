Specification "size.lf".

Theorem plus-s-rhs : forall N1 N2 N3 D1,
  {D1: plus N1 N2 N3} =>
  exists D2, {D2: plus N1 (s N2) (s N3)}.
induction on 1.
intros.
case H1.
apply IH to H5.
exists plus-s x1 (s N2) (s x3) D2. search.
exists plus-z (s N3). search.
 
Theorem ident-rhs : forall x1,
  {x1: nat} => exists D, {D: plus x1 z x1}.
induction on 1.
intros.
case H1 (keep).
apply IH to H2.
exists plus-s x z x D. search.
exists plus-z z. search.
 
Theorem plus-exist : forall N1 N2,
  {N1: nat} => {N2:nat} => exists N3 D, {D: plus N1 N2 N3}.
induction on 1.
intros.
case H1.
apply IH to H3 H2.
exists s N3.
exists plus-s x N2 N3 D.
search.
exists N2.
exists plus-z N2. search.
 
Theorem plus-comm : forall N1 N2 N3 D1,
  {D1: plus N1 N2 N3} =>
  exists D2, {D2: plus N2 N1 N3}.
induction on 1.
intros.
case H1.
apply IH to H5.
apply plus-s-rhs to H6.
exists D1. search.
apply ident-rhs to H2.
exists D. search.
 
Theorem leq-transitive : forall x1 x2 x3 D1 D2,
  {D1: leq x1 x2} => {D2: leq x2 x3} =>
  exists D3, {D3: leq x1 x3}.
induction on 1.
intros.
case H1.
case H2.
apply IH to H5 H8.
exists leq-s x4 x7 D1.
search.
case H2.
exists leq-z (s x5).
search.
exists leq-z x3.
search.
 
Theorem leq-monotonic-plus-r : forall x1 x2 x3 x12 x13 D1 D2 D3,
  {D2: plus x1 x2 x12} => {D1: leq x2 x3} =>
  {D3: plus x1 x3 x13} =>
  exists D4, {D4: leq x12 x13}.
induction on 1.
intros.
case H1.
case H3.
apply IH to H7 H2 H11.
exists leq-s x6 x8 D2.
search.
case H3.
exists D1.
search.
 
Theorem leq-monotonic-plus-l : forall x1 x2 x3 x13 x23 D1 D2 D3,
  {D1: leq x1 x2} => {D2: plus x1 x3 x13} => {D3: plus x2 x3 x23} =>
  exists D4, {D4: leq x13 x23}.
intros.
apply plus-comm to H2.
apply plus-comm to H3.
apply leq-monotonic-plus-r to H4 H1 H5.
exists D6.
search.
 
Theorem leq-monotonic-plus : forall x1 x2 x3 x4 x13 x24 D1 D2 D3 D4,
  {D1: leq x1 x2} => {D2: leq x3 x4} =>
  {D3: plus x1 x3 x13} => { D4: plus x2 x4 x24} =>
  exists D6, {D6: leq x13 x24}.
intros.
assert { x2 : nat }.
assert { x3 : nat }.
apply plus-exist to H5 H6.
apply leq-monotonic-plus-l to H1 H3 H7.
apply leq-monotonic-plus-r to H7 H2 H4.
apply leq-transitive to H8 H9.
exists D7.
search.

Schema C := (x: tm, y: size x (s z)).

Theorem nat-independent : ctx G:C, forall N,
  {G |- N : nat } => {N : nat}.
induction on 1. intros. case H1.
apply IH to H2. search. search.
 
Theorem plus-independent : ctx G:C, forall N1 N2 N3 D,
  {G |- D : plus N1 N2 N3} => {D : plus N1 N2 N3}.
induction on 1. intros. case H1.
apply IH to H5. search. apply nat-independent to H2. search.
 
Theorem leq-independent : ctx G:C, forall N1 N2 D,
  {G |- D : leq N1 N2} => {D : leq N1 N2}.
induction on 1. intros. case H1.
apply IH to H4. apply nat-independent to H2.
apply nat-independent to H3. search.
apply nat-independent to H2. search.
 
% Reprove `plus-exist` but with context shape `C`
Theorem plus-exist-independent : ctx G:C, forall N1 N2,
  {G |- N1: nat} => {G |- N2:nat} => exists N3 D, {G |- D: plus N1 N2 N3}.
induction on 1.
intros.
case H1.
apply IH to H3 H2.
exists s N3.
exists plus-s x N2 N3 D.
search.
exists N2.
exists plus-z N2. search.

Theorem tm-has-size : ctx G:C, forall E,
  {G |- E : tm} => exists N D, {G |- D: size E N}.
  induction on 1. intros.
  case H1 (keep).
  % abstraction case
  weaken H2 with size n (s z). apply IH to H3 with (G = G, n1:tm, n:size n1 (s z)).
  assert { G, n1:tm, n:size n1 (s z) |- N n1 n : nat }. prune H5.
  strengthen H5. strengthen H6.
  exists (s N).
  exists size-lam E1 N D. search.
  % application case
  apply IH to H2. apply IH to H3.
  assert { G |- N : nat }. assert { G |- N1 : nat }.
  apply plus-exist-independent to H6 H7.
  exists (s N3). exists size-app E1 E2 N N1 N3 D D1 D2.
  search.
  % variable case
  exists (s z). exists n1. search.

Theorem size-at-least-one : ctx G:C, forall E D N,
  { G |- D : size E N } => exists D', { G |- D' : leq (s z) N }.
intros.
case H1.
exists leq-s z X3 (leq-z X3). search.
exists leq-s z X (leq-z X). search.
exists leq-s z z (leq-z z). search.

Theorem size-subst : ctx G:C, forall E' E: o -> o T-size D1: o -> o -> o,
  {G |- [x][dx] D1 x dx: {x:tm}{dx: size x (s z)} size (E x) T-size} =>
  {G |- E' : tm} =>
    exists D2 Sub-size D3,
      {G |- D2 : size (E E') Sub-size} /\
      {G |- D3: leq T-size Sub-size}.
induction on 1.
intros.
case H1.
% app case
  prune H6. prune H5. prune H10.
  apply IH to H8 H2. apply IH to H9 H2.
  case H11. prune H13. prune H14.
  case H12. prune H15. prune H16.
  assert {G |- Sub-size n1 n : nat}. prune H17.
  assert {G |- Sub-size1 n1 n : nat}. prune H18.
  apply plus-exist-independent to H17 H18. prune H19.
  assert { G |- N3 n1 n : nat }. prune H20.
  assert { G |- D4 : plus X1 X2 T-size1 }*. strengthen H10. strengthen H21. search.
  apply leq-monotonic-plus to H14 H16 H21 H19.
  exists size-app (E1 E') (E2 E') Sub-size Sub-size1 N3 D1 D6 D.
  exists (s N3). exists leq-s T-size1 N3 (D8 n1 n). split. search. search.
  % lam
  weaken H2 with tm. weaken H6 with size n5 (s z).
  ctxpermute H5 to G, n3:tm, n4: size n3 (s z), n:tm, n1:size n (s z).
  apply IH to H8 H7 with (G = G, n1:tm, n:size n1 (s z)).
  case H9.
  prune H10. prune H11.
  assert {G, n1:tm, n:size n1 (s z) |- Sub-size n6 n5 n4 n3 n2 n1 n : nat}. prune H12.
  inst H3 with n = E'. strengthen H13.
  ctxpermute H13 to G, n2:tm, n1: size E' (s z). strengthen H14.
  exists size-lam ([x] E1 E' x) Sub-size D2. exists (s Sub-size). strengthen H11. strengthen H16.
  exists leq-s T-size1 Sub-size D3. split. search. search.
  % var1
  apply tm-has-size to H2. prune H3. assert {G |- N n1 n : nat}. prune H4.
  exists D. exists N. apply size-at-least-one to H3. prune H5. 
  exists D'. split. search. search.
  % var2
  exists n3. exists (s z). exists leq-s z z (leq-z z). split. search. search.

Theorem size-subst' : ctx G:C, forall E' E: o -> o T-size D1: o -> o -> o,
  {G |- [x][dx] D1 x dx: {x:tm}{dx: size x (s z)} size (E x) T-size} =>
  {G |- E' : tm} =>
    exists D2 Sub-size D3,
      {G |- D2 : size (E E') Sub-size} /\
      {D3: leq T-size Sub-size}.
intros.
apply size-subst to H1 H2. case H3. apply leq-independent to H5.
exists D2 n1 n. exists Sub-size n1 n. exists D3 n1 n.
split. search. search.
